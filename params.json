{"name":"Jackbox","tagline":"Modular Closures, Ruby Code Injectors, Re-Classings, and other coder morphins","body":"\r\n\r\n<p>Copyright Â© 2014, 2015 LHA. All rights reserved.</p>\r\n\r\n<p><a href=\"http://jackbox.us\"></a></p><h1><a id=\"user-content-jackbox\" class=\"anchor\" href=\"#jackbox\" aria-hidden=\"true\"><span class=\"octicon octicon-link\"></span></a><a href=\"http://jackbox.us\">Jackbox</a></h1><p></p>\r\n\r\n<p>The main library function at this time centers around the concept of code Injectors.  To make it easier to grasp the idea behind them, these can perhaps be thought of as a form of <strong>closures which can also serve as modules</strong>.  Most of all Injectors propose some additional interesting properties to the idea of a mix-in.  For instance, they give your code the ability to capture its surrounding context and mix it into an indiscriminate target.  They make it possible to solve several general problems in some areas of OOP, overcoming traditional Ruby shortcomings with the GOF Decorator and Strategy Patterns, and enabling <strong>some new code patterns.</strong>  They instrument control over (code presence) the presence of injector code in targets with mechanisms involving injector ejection and directives.  They extend Ruby's mix-in and method resolution over and beyond what is possible with regular modules. Finally, they introduce the concept of Injector Versioning.  This is a feature which allows you to redefine parts of your program in local isolation and without it affecting others.  See Injector Versioning below.  </p>\r\n\r\n<h2><a id=\"user-content-basic-methods\" class=\"anchor\" href=\"#basic-methods\" aria-hidden=\"true\"><span class=\"octicon octicon-link\"></span></a>Basic Methods</h2>\r\n\r\n<p>There are some basic methods to Jackbox.  These are just rudimentary helpers, which in effect are a form of syntax sugar for every day things.  But, behind their apparent sugar coating lie some powerful capabilities as shown the deeper you delve into Jackbox.  For more on them read the following sections, but their preliminary descriptions follow here:</p>\r\n\r\n<h4><a id=\"user-content-decorate-sym-blk\" class=\"anchor\" href=\"#decorate-sym-blk\" aria-hidden=\"true\"><span class=\"octicon octicon-link\"></span></a>#decorate :sym, &amp;blk</h4>\r\n\r\n<p>This method allows for decorations to be placed on a single method, be it an instance or class method without too much fuss. One important thing about #decorate is that it works like #define_method, but in addition, it also makes possible the use of Ruby's #super within the body of the decorator.  It really presents a better alternative and can be used instead of #alias_method_chain.</p>\r\n\r\n<p>At the class level:</p>\r\n\r\n<pre><code>class One\r\n  decorate :foo do\r\n    super() + 'decoration '                   # super available within decoration\r\n  end\r\nend\r\n\r\nOne.new.foo\r\n#=&gt; foo decoration\r\n</code></pre>\r\n\r\n<p>Or, at the object level:</p>\r\n\r\n<pre><code>one = One.new\r\n\r\none.decorate :foo do |arg|\r\n  super() + arg                               # again the use of super is possible\r\nend\r\n\r\none.foo('after')\r\n#=&gt; foo decoration after\r\n</code></pre>\r\n\r\n<p>It also works like so:</p>\r\n\r\n<pre><code>Object.decorate :inspect do\r\n  puts super() + \" is your object\"\r\nend\r\n\r\nObject.new.inspect\r\n#=&gt; #&lt;Object:0x00000101787e20&gt; is your object\r\n</code></pre>\r\n\r\n<h4><a id=\"user-content-with-obj-blk\" class=\"anchor\" href=\"#with-obj-blk\" aria-hidden=\"true\"><span class=\"octicon octicon-link\"></span></a>#with obj, &amp;blk</h4>\r\n\r\n<p>There is also a new version of the #with construct.  The important thing to remember about #with is it has a primary context which is the object passed to it, and a secondary context which is the object you are making the call from.  This allows you to work <strong>with</strong> both contexts at the same time. The other important thing about #with is that it allows you to directly place definitions on and returns the same object you passed into it. </p>\r\n\r\n<p>Here is some sample usage code:</p>\r\n\r\n<pre><code>class One\r\n  def foo(arg)\r\n    'in One ' + arg\r\n  end\r\nend\r\n\r\nclass Two\r\n  def faa(arg)\r\n    'and in Two ' + arg\r\n  end\r\n  def meth\r\n    with One.new do                           # context of One and Two available simultaneously!!!\r\n      return foo faa 'with something'         \r\n    end                                       # return object\r\n  end\r\nend\r\n\r\nTwo.new.meth\r\n#=&gt; 'in One and in Two with something'\r\n</code></pre>\r\n\r\n<p>Use it to define function:</p>\r\n\r\n<pre><code># internal facade for Marshal\r\nwith Object.new do\r\n\r\n    @file_spec = [file, mode]               \r\n    def dump hash\r\n        File.open(*@file_spec) do |file|\r\n            Marshal.dump( hash, file)\r\n        end\r\n    end\r\n    def load hash\r\n        File.open(*@file_spec) do |file|\r\n            hash.merge!(Marshal.load( file ))\r\n        end\r\n    end\r\n\r\nend\r\n</code></pre>\r\n\r\n<p>Use it with <strong>#decorate</strong> on singleton classes like this:</p>\r\n\r\n<pre><code>class Dir\r\n\r\n  with singleton_class do\r\n    decorate :entries do |name='.', opts=nil| #:doc:\r\n      super name, opts\r\n    end\r\n    decorate :new do |name, &amp;code| #:doc:\r\n      FileUtils.mkpath name unless exists?(name)\r\n      return Dir.open(name, &amp;code) if code\r\n      Dir.open name\r\n    end\r\n  end\r\n\r\nend\r\n</code></pre>\r\n\r\n<h4><a id=\"user-content-lets-symnil-blk\" class=\"anchor\" href=\"#lets-symnil-blk\" aria-hidden=\"true\"><span class=\"octicon octicon-link\"></span></a>#lets sym=nil, &amp;blk</h4>\r\n\r\n<p>We could say, this is simple syntax sugar.  It adds readability to some constructs.  It allows the creation of local or global procs using a more function-like syntax. But #lets, also opens the door to a new coding pattern termed Re-Classing.  See below.  The important thing about #lets is that it always defines some method/proc/lambda.  Here are some examples:</p>\r\n\r\n<p>To define local functions/lambdas. Define symbols in local scope:</p>\r\n\r\n<pre><code>def main\r\n  lets bar =-&gt;(arg){ arg * arg }              # read as: lets set bar to lambda/proc \r\n\r\n  # later on ...\r\n\r\n  var = bar[3]                                # bar is only available within #main\r\n  #...\r\nend                                                         \r\n</code></pre>\r\n\r\n<p>As a shortcut for define_method. Use it for short functional definitions:</p>\r\n\r\n<pre><code>lets( :meth ){ |arg| arg * 2 }                # read as: lets define symbol :meth to be ....\r\nmeth(3)                                                         \r\n# =&gt; 6 \r\n</code></pre>\r\n\r\n<p>Can be used to define a special values or pseudo-immutable strings:</p>\r\n\r\n<pre><code>lets(:foo){ 3+Math::Pi }                      # read as: lets set :foo to value\r\nlets(:faa){ 'some important string' }\r\n</code></pre>\r\n\r\n<h2><a id=\"user-content-injectors\" class=\"anchor\" href=\"#injectors\" aria-hidden=\"true\"><span class=\"octicon octicon-link\"></span></a>Injectors</h2>\r\n\r\n<p>Injectors are the main tool in Jackbox at the time of this writing. These again are a form of mix-in that has properties of both a closure and a module.  They can also be thought of as an <strong>extended closure</strong> if you will or as a special kind of module if you want.  In the sections below we will discuss some of the methods available to you with Jackbox in connection with Injectors, as well as elaborate on some of the other properties of injectors. But, it is essential to understand there are some syntactical differences to Injectors with respect to regular modules.  We will show them first, with some examples: </p>\r\n\r\n<p><strong>INJECTORS ARE DECLARED IN THE FOLLOWING WAYS:</strong></p>\r\n\r\n<pre><code>injector :name\r\n\r\n#  or...\r\n\r\nName = injector :name\r\n\r\n# or even ...\r\n\r\nfacet :Name                                    # capitalized method, using alias #facet \r\n</code></pre>\r\n\r\n<p>Their use and semantics are somewhat defined by the following snippet.  But, to fully understand their implications to your code, you have to understand the sections on injector versioning, their behavior under inheritance, and perhaps injector directives. </p>\r\n\r\n<pre><code># somewhere in your code\r\ninclude Injectors\r\n\r\ninjector :my_injector                         # define the injector \r\n\r\nmy_injector do                     \r\n  def bar                  \r\n    :a_bar\r\n  end\r\nend\r\n\r\n# later on...\r\nwidget.enrich my_injector                     # apply the injector\r\nwidget.bar\r\n# =&gt; bar\r\n\r\n# or...  \r\n\r\nMine = my_injector\r\nclass Target\r\n  inject Mine                                 # apply the injector\r\nend\r\n\r\nTarget.new.bar\r\n# =&gt; bar\r\n\r\n# etc ...\r\n</code></pre>\r\n\r\n<p>Here is a more interesting example:</p>\r\n\r\n<pre><code>class ClosureExpose\r\n\r\n    some_value = 'something'\r\n\r\n    injector :capture do\r\n        define_method :val do\r\n            some_value\r\n        end\r\n    end\r\nend\r\n\r\nclass SecondClass\r\n    inject ClosureExpose.capture\r\nend\r\n\r\n# the result\r\nSecondClass.new.val.should == 'something'\r\n</code></pre>\r\n\r\n<p><strong>INJECTORS HAVE PROLONGATIONS:</strong></p>\r\n\r\n<pre><code>injector :my_injector\r\n\r\nmy_injector do                                # first prolongation\r\n\r\n  def another_method\r\n  end\r\n\r\nend\r\n\r\n# ...\r\n\r\nmy_injector do                                # another prolongation\r\n\r\n  def yet_another_method\r\n  end\r\n\r\nend\r\n</code></pre>\r\n\r\n<h4><a id=\"user-content-injector-sym\" class=\"anchor\" href=\"#injector-sym\" aria-hidden=\"true\"><span class=\"octicon octicon-link\"></span></a>#injector :sym</h4>\r\n\r\n<p>This is a global function.  It defines an object of type Injector with the name of symbol.  Use it when you want to generate an Injector object for later use.  The symbol can then be used as a handle to the injector whenever you need to prolong the injector by adding methods to it or apply it to another object. Additionally, this symbol plays a role in defining the injector's scope.  Injectors with capitalized names like :Function, :Style, etc have a global scope.  That is they are available throughout the program:</p>\r\n\r\n<pre><code>class A\r\n  injector :Function\r\nend\r\n\r\nclass B\r\n  include Function()\r\nend\r\n\r\n# This is perfectly valid with injectors  \r\n</code></pre>\r\n\r\n<p>On the other hand Injectors with a lower case name are only available <strong>from</strong> the scope in which they were defined, like the following example shows:</p>\r\n\r\n<pre><code>class AA\r\n  injector :form\r\nend\r\n\r\nclass BB\r\n  include form                                # This genenerates and ERROR!                                 \r\nend                         \r\n\r\nclass BB\r\n  include AA.form\r\nend\r\n\r\n# This is perfectly valid with injectors  \r\n</code></pre>\r\n\r\n<p>For all this to happen Jackbox also introduces some additional Ruby constructs, namely the keywords #inject and #enrich.  These can be thought as simply new corollaries to #include and #extend. In fact they can be used interchangeably.  If you're working with injectors you may want to use them instead depending on context to make clear your intent.</p>\r\n\r\n<h4><a id=\"user-content-includeinject-jack\" class=\"anchor\" href=\"#includeinject-jack\" aria-hidden=\"true\"><span class=\"octicon octicon-link\"></span></a>#include/inject *jack</h4>\r\n\r\n<p>This method is analogous to ruby's #include but its use is reserved for Injectors.  The scope of this method is the same as the scope of #include, and its intended use like include's is for class definitions. Use it to \"include\" an Injector into a receiving class.  Takes multiple injectors.</p>\r\n\r\n<h4><a id=\"user-content-extendenrich-jack\" class=\"anchor\" href=\"#extendenrich-jack\" aria-hidden=\"true\"><span class=\"octicon octicon-link\"></span></a>#extend/enrich *jack</h4>\r\n\r\n<p>This method in turn is analogous to ruby's #extend. The scope of this method is also the same as that of #extend, and its intended use if for object definition.  Use it to extend the receiver of an injector.  Takes multiple injectors.</p>\r\n\r\n<p><strong>IMPORTANT NOTE: Injector lookup follows the method and not the constant lookup algorithm.</strong></p>\r\n\r\n<p>If you need to follow constant lookup, here is the code for that:</p>\r\n\r\n<pre><code>Name = injector :sym ....                     # this also creates a hard tag (see below)\r\n</code></pre>\r\n\r\n<h3><a id=\"user-content-injector-versioning\" class=\"anchor\" href=\"#injector-versioning\" aria-hidden=\"true\"><span class=\"octicon octicon-link\"></span></a>Injector Versioning</h3>\r\n\r\n<p>One of the most valuable properties of injectors is Injector Versioning.  Versioning is the term used to identify a feature in the code that produces an artifact of injection which contains a certain set of methods with their associated outputs, and represents a snapshot of that injector up until the point it's applied to an object.  From, that point on the object contains only that version of methods from that injector, and any subsequent overrides to those methods are only members of the \"prolongation\" of the injector and do not become part of the object of injection unless some form of re-injection occurs. Newer versions of an injector's methods only become part of newer objects or newer injections into existing targets.  With Jackbox Injector Versioning two different versions of the same code object can be running simultaneously. </p>\r\n\r\n<p>We'll use some examples to illustrate the point.  This is how versioning occurs:</p>\r\n\r\n<pre><code># injector declaration\r\n#___________________\r\ninjector :my_injector do                                                            \r\n  def bar\r\n    :a_bar                                    # version bar.1\r\n  end\r\n  def foo\r\n    # ...\r\n  end\r\nend\r\n\r\nobject1.enrich my_injector                    # apply the injector --first snapshot\r\nobject1.bar.should == :a_bar                  # pass the test\r\n\r\n# injector prolongation\r\n#__________________\r\nmy_injector do                                                                          \r\n  def bar\r\n    :some_larger_bar                          # version bar.2 ... re-defines bar\r\n  end\r\n  # ...\r\nend\r\n\r\nobject2.enrich my_injector                    # apply the injector --second snapshot\r\nobject2.bar.should == :some_larger_bar\r\n\r\n# result\r\n\r\nobject1.bar.should == :a_bar                  # bar.1 is still the one\r\n\r\n###############################################\r\n# First object has kept its preferred version #\r\n###############################################\r\n</code></pre>\r\n\r\n<p>When re-injection occurs, and only then does the new version of the #bar method come into play. But the object remains unaffected otherwise, keeping its preferred version of methods.  The new version is available for further injections down the line and to newer client code.  Internal local-binding is preserved.  If re-injection is executed then clients of the previous version get updated with the newer one.  Here is the code:</p>\r\n\r\n<pre><code># re-injection\r\n#_________________\r\nobject1.enrich my_injector                    # re-injection --third snapshot\r\n\r\nobject1.bar.should == :some_larger_bar        # bar.2 now available\r\n\r\n###############################################\r\n# First object now has the updated version    #\r\n###############################################\r\n</code></pre>\r\n\r\n<p>Re-injection on classes is a little bit trickier.  Why? Because class injection should be more pervasive --we don't necessarily want to be redefining a class at every step. To re-inject a class we must use the Strategy Pattern (see below) or use a private update.  See the sections below as well as the rspec files for more on this.   </p>\r\n\r\n<p>Here is an example of Injector Versioning as it pertains to classes:</p>\r\n\r\n<pre><code># injector declaration:\r\n#___________________\r\ninjector :Versions do\r\n  def meth arg                                # version meth.1\r\n    arg ** arg\r\n  end\r\nend\r\n\r\nclass One\r\n  inject Versions()                           # apply --snapshot\r\nend\r\n\r\n# injector prolongation:                              \r\n#_________________\r\nVersions do\r\n  def meth arg1, arg2                         # version meth.2 ... redefines meth.1\r\n    arg1 * arg2\r\n  end\r\nend\r\n\r\nclass Two\r\n  inject Versions()                           # apply --snapshot\r\nend\r\n\r\n# result\r\n\r\nTwo.new.meth(2,4).should == 8                 # meth.2 \r\nOne.new.meth(3).should == 27                  # meth.1\r\n\r\n##############################################\r\n# Two different injector versions coexisting #\r\n##############################################\r\n</code></pre>\r\n\r\n<p>To update the class, we then do the following:</p>\r\n\r\n<pre><code>class One\r\n  update Versions()                           # private call to #update\r\nend\r\n\r\nOne.new.meth(2,4).should == 8                 # meth.2 \r\nTwo.new.meth(2,4).should == 8                 # meth.2 \r\n\r\n##############################################\r\n# class One is now updated to the latest     #\r\n##############################################\r\n</code></pre>\r\n\r\n<h3><a id=\"user-content-taggingnaming\" class=\"anchor\" href=\"#taggingnaming\" aria-hidden=\"true\"><span class=\"octicon octicon-link\"></span></a>Tagging/Naming</h3>\r\n\r\n<p>The use of Tags is central to the concept of Injector Versioning.  Tagging happens in the following ways:</p>\r\n\r\n<pre><code>Version1 = jack :function do\r\n  def meth arg\r\n    arg\r\n  end\r\n  def mith\r\n    meth 2\r\n  end\r\nend\r\n\r\nVersion2 = function do\r\n  def mith arg\r\n    meth(arg) * meth(arg)\r\n  end\r\nend\r\n</code></pre>\r\n\r\n<p>Version1 and Version2 are two different hard versions/tags/names of the same Injector.  There are also soft tags (see below).  </p>\r\n\r\n<h3><a id=\"user-content-local-binding\" class=\"anchor\" href=\"#local-binding\" aria-hidden=\"true\"><span class=\"octicon octicon-link\"></span></a>Local Binding</h3>\r\n\r\n<p>Before we move on, we also want to give some further treatment to injector local-binding.  That is, the binding of an injectors' methods is local to the prolongation/version in which they are located before the versioning occurs.  Here, is the code:</p>\r\n\r\n<p><strong>Note: In the following examples we use the notion of version naming/tagging.  This allows you to tag different versions/prolongations of an Injector for later use.  Once a version is tagged it shouldn't be modified</strong></p>\r\n\r\n<pre><code># injector declaration\r\n#_____________________\r\n\r\nVersion1 = injector :functionality do\r\n  def basic arg                               # version basic.1\r\n    arg * 2\r\n  end\r\nend\r\n\r\no = Object.new.enrich Version1                # apply --snapshot (like above)\r\no.basic(1).should == 2                        # basic.1 \r\n\r\n# injector prolongation\r\n#_____________________\r\n\r\nVersion2 = functionality do\r\n  def basic arg                               # version basic.2\r\n    arg * 3                                   # specific use in compound.1\r\n  end\r\n\r\n  def compound                                # compound.1 \r\n    basic(3) + 2                                      \r\n  end\r\nend\r\n\r\np = Object.new.enrich Version2                # apply --snapshot (like above)\r\np.basic(1).should == 3                        # basic.2 \r\np.compound.should == 11                       # compound.1 --bound locally to basic.2\r\n\r\no.basic(1).should == 2                        # basic.1 \r\no.compound.should == 11                       # compound.1 --bound locally to basic.2\r\n\r\n####################################################\r\n# #compound.1 bound to the right version #basic.2  #\r\n####################################################\r\n</code></pre>\r\n\r\n<h3><a id=\"user-content-method-virtual-cache\" class=\"anchor\" href=\"#method-virtual-cache\" aria-hidden=\"true\"><span class=\"octicon octicon-link\"></span></a>Method Virtual Cache</h3>\r\n\r\n<p>When you are working with an Injector in irb/pry it is often easier to just add methods to the injector without actually having to re-apply the injector to the the target to see the result.  This is just what the Jackbox method virtual cache is for among other things.  Here is what the code looks like:</p>\r\n\r\n<pre><code># Facet definition\r\nfacet :SpecialMethods\r\n\r\nclass MyClass\r\n  include SpecialMethods\r\nend\r\n\r\nobj = MyClass.new\r\n\r\nSpecialMethods do\r\n  def spm1                                    # spm1 is only defined in the virtual cache\r\n    :result                                   # It is not actually part of the class yet!!\r\n  end                                         # until this version/prolongation is applied\r\nend\r\n\r\nexpect(obj.spm1).to eq(:result)               # yet my obj can use it --no problem\r\n</code></pre>\r\n\r\n<p>The key idea here is that the method virtual cache is the same for all versions of the Injector and all its applications.  If we redefine those methods they also get redefined for all versions.  To actually lock the method versions you must apply the Injector.</p>\r\n\r\n<h4><a id=\"user-content-define_method-sym-blk\" class=\"anchor\" href=\"#define_method-sym-blk\" aria-hidden=\"true\"><span class=\"octicon octicon-link\"></span></a>#define_method sym, &amp;blk</h4>\r\n\r\n<p>There is one more interesting property to method definition on Injectors however. The use of #define_method to re-define methods in any prolongation updates the entire injector and all its versions.  This also preserves a fundamental tenet of injectors: take some local context, enclose it, and use the injector to introduce it to some indiscriminate target, and additionally has some other uses as we'll see with in our description of patterns and injector composition.  </p>\r\n\r\n<p>Here is an example of the difference with #define_method:</p>\r\n\r\n<pre><code>facet :some_facet do\r\n    def meth\r\n      :meth\r\n    end\r\n\r\n    def foo_bar\r\n        'a foo and a bar'\r\n    end\r\nend\r\n\r\nclass Client\r\n    inject some_facet\r\nend\r\n\r\nClient.new.meth.should == :meth\r\nClient.new.foo_bar.should == 'a foo and a bar'      \r\n\r\n\r\nsome_facet do                                  \r\n    def meth                                    # New version\r\n      puts :them\r\n    end\r\n\r\n    define_method :foo_bar do                   # New version\r\n        'fooooo and barrrrr'\r\n    end\r\nend     \r\n                                              ################################\r\n                                              # Like above!                  #\r\nClient.new.meth.should == :meth               # No re-injection == No change #\r\n                                              ################################\r\n\r\n                                              ################################\r\nClient.new.foo_bar.should ==                  # Different!!!                 #\r\n'fooooo and barrrrr'                          # No re-injection == Change    #\r\n                                              # . Thanks to define_method    #\r\n                                              ################################ \r\n</code></pre>\r\n\r\n<p>Injector Versioning together with injector local-binding allow the metamorphosis of injectors to fit the particular purpose at hand and keeping those local modifications isolated from the rest of your program making your code to naturally evolve with your program. Use it as an alternative to refinements.</p>\r\n\r\n<h3><a id=\"user-content-injector-introspection\" class=\"anchor\" href=\"#injector-introspection\" aria-hidden=\"true\"><span class=\"octicon octicon-link\"></span></a>Injector introspection</h3>\r\n\r\n<p>Injectors have the ability to speak about themselves.  Moreover injectors can speak about their members just like any module or class, and can also inject their receivers with these introspecting capabilities.  Every injected/enriched object or module/class can enumerate its injectors, and injectors can enumerate their members, and so forth.  </p>\r\n\r\n<pre><code>injector :Function do\r\n  def far\r\n  end\r\n  def close\r\n  end\r\nend\r\n\r\ninjector :Style do\r\n    def pretty\r\n    end\r\nend\r\n\r\nclass Target\r\n  inject Function(), Style()\r\nend\r\n\r\n# class ?\r\n\r\nFunction().class.should == Injector                 \r\nStyle().class.should == Injector \r\n</code></pre>\r\n\r\n<h4><a id=\"user-content-injectors-sym\" class=\"anchor\" href=\"#injectors-sym\" aria-hidden=\"true\"><span class=\"octicon octicon-link\"></span></a>#injectors *sym</h4>\r\n\r\n<p>Called with no arguments returns a list of injectors.  A call with a list of injector symbols however returns an array of actual Injector objects matching the names supplied in a LIFO fashion. An example use goes like this:</p>\r\n\r\n<pre><code># injectors (in this target) ?\r\n\r\nTarget.injectors \r\n=&gt; [(#944120:|Function|), (#942460:|Style|)] \r\n\r\n# injectors :name ?\r\n\r\nTarget.injectors :Function\r\n =&gt; [(#944120:|Function|)]                    # same as #injectors.collect_by_name :name\r\n\r\nTarget.injectors :all                         # all injectors in this class's hierarchy \r\n                                              (see section on Inheritance)\r\n</code></pre>\r\n\r\n<p>The method also extends into a minuscule API: </p>\r\n\r\n<pre><code>Target.injectors.by_name.should == [:Function, :Style] \r\n# ...\r\nTarget.injectors(:all).by_name\r\n# aliased to :sym_list\r\n\r\nTarget.injectors.collect_by_name :name        # see above\r\n# ...\r\nTarget.injectors(:all).collect_by_name :name\r\n# aliased to :all_by_sym\r\n\r\nTarget.injectors.find_by_name :Function       # last one in first out\r\n =&gt; (#944120:|Function|)      \r\n# ...\r\nTarget.injectors(:all).find_by_name :name\r\n# aliased to last_by_sym\r\n\r\nFunction().instance_methods.should == [:far, :close]      \r\nStyle().instance_methods.should == [:pretty]    \r\n\r\n# later on...\r\n\r\n# eject all injectors in target\r\nTarget.injectors.each{ |j| Target.eject j }\r\n\r\n# or..\r\n\r\nTarget.eject *Target.injectors       \r\n</code></pre>\r\n\r\n<h4><a id=\"user-content-history-alias-versions\" class=\"anchor\" href=\"#history-alias-versions\" aria-hidden=\"true\"><span class=\"octicon octicon-link\"></span></a>#history alias #versions</h4>\r\n\r\n<p>This method returns a trace of all the target hosted Injectors which is ordered based on the order in which they are created.  It includes tags and soft tags which can be specifically accessed thru the #tags method below.  Here is the code:</p>\r\n\r\n<pre><code># create our injector\r\ninjector :HistorySample\r\n\r\n# host it a couple of times\r\nextend( HistorySample(), HistorySample() )\r\n\r\n# expect the following\r\nexpect(injectors).to eq(HistorySample().history)\r\nexpect(HistorySample().history.size).to eq(2)\r\nexpect(HistorySample().history.last).to eql(HistorySample())\r\nexpect(HistorySample().history.last).to_not eq(HistorySample().spec)\r\n\r\n# create a tag\r\nHistorySampleTag = HistorySample()\r\n\r\nexpect(HistorySample().history.size).to eq(3)\r\nexpect(HistorySample().history.last).to equal(HistorySampleTag)\r\n</code></pre>\r\n\r\n<h4><a id=\"user-content-tags\" class=\"anchor\" href=\"#tags\" aria-hidden=\"true\"><span class=\"octicon octicon-link\"></span></a>#tags</h4>\r\n\r\n<p>This method traces the tags only.  Here is the code:</p>\r\n\r\n<pre><code># at this point from the above\r\nexpect(HistorySample().tags.size).to eq(1)\r\n\r\nHistorySample(:tag) do\r\n  # some definitions\r\nend\r\n\r\n# expect the following\r\nexpect(HistorySample().tags.size).to eq(2) \r\n</code></pre>\r\n\r\n<p>Take a look at the Transformers Pattern below for an application of this and also the Jackbox blog at <a href=\"http://jackbox.us\"></a><a href=\"http://jackbox.us\">http://jackbox.us</a></p>\r\n\r\n<h4><a id=\"user-content-precedent-and-progenitor-alias-pre-pro\" class=\"anchor\" href=\"#precedent-and-progenitor-alias-pre-pro\" aria-hidden=\"true\"><span class=\"octicon octicon-link\"></span></a>#precedent and #progenitor (alias #pre, #pro)</h4>\r\n\r\n<p>The #pre method gets the previous element in the history. Here is the code:</p>\r\n\r\n<pre><code># create the injector\r\ninjector :HistorySample\r\n\r\n# create some history\r\nextend HistorySample(), HistorySample()\r\n\r\n# expect the following\r\nexpect(HistorySample().history.last.precedent).to equal(HistorySample().history.first)\r\n</code></pre>\r\n\r\n<p>The #pro method is a little different.  It gets the version from which a particular injector was generated. This may not necessarily be the precedent.  Take a look at the following code.</p>\r\n\r\n<pre><code># create the injector\r\ninjector :Progample\r\n\r\n# expect the following\r\nexpect(Progample().history).to be_empty\r\nexpect(Progample().progenitor).to equal(Progample().spec)\r\n\r\n# create some history\r\nextend Progample(), Progample()       \r\n\r\n# expect the following\r\nexpect(Progample().history.size).to eq(2)\r\nexpect(Progample().history.first.progenitor).to equal(Progample().spec)\r\nexpect(Progample().history.last.progenitor).to equal(Progample().spec)\r\n</code></pre>\r\n\r\n<p>For more on this see the rspec files.     </p>\r\n\r\n<h3><a id=\"user-content-injector-composition\" class=\"anchor\" href=\"#injector-composition\" aria-hidden=\"true\"><span class=\"octicon octicon-link\"></span></a>Injector composition</h3>\r\n\r\n<p>The composition of multiple injectors into an object can be specified as follows:</p>\r\n\r\n<pre><code>include Injectors\r\n\r\n# declare injectors\r\ninjector :FuelSystem                          # capitalized methods\r\ninjector :Engines\r\ninjector :Capsule\r\ninjector :Landing\r\n\r\n# compose the object\r\nclass SpaceShip\r\n\r\n    inject FuelSystem(), Engines(), Capsule(), Langing()    # capitalized method use\r\n\r\n    def launch\r\n        gas_tank fuel_lines burners ignition :go\r\n        self\r\n    end\r\nend\r\n\r\nSpaceship.injectors.by_name == [:FuelSystem, :Engines, :Capsule, :Landing]\r\n\r\n# define functionality\r\nFuelSystem do\r\n    def gas_tank arg\r\n        :gas\r\n    end\r\n    def fuel_lines arg\r\n        :fuel\r\n    end\r\n    def burners arg\r\n        :metal\r\n    end\r\nend\r\n\r\n# ...\r\n\r\n# create object\r\nflyer = SpaceShip.new.launch\r\n\r\n\r\n# in-flight definitions, ha ha ha\r\nvar = 'wheels'\r\n\r\nLanding do\r\n    define_method :gear do                      # a clolsure !!\r\n        var\r\n    end\r\nend\r\n</code></pre>\r\n\r\n<h3><a id=\"user-content-inheritance\" class=\"anchor\" href=\"#inheritance\" aria-hidden=\"true\"><span class=\"octicon octicon-link\"></span></a>Inheritance</h3>\r\n\r\n<p>The behavior of Injectors under inheritance is partially specified by what follows:</p>\r\n\r\n<pre><code>injector :j\r\n\r\nclass C\r\nend\r\nC.inject j {                                  #foo pre-defined at time of injection\r\n  def foo\r\n    'foo'\r\n  end\r\n}\r\nC.injectors.by_name.should == [:j]\r\nC.new.injectors.by_name.should == [:j]\r\n\r\nC.new.foo.should == 'foo'\r\n\r\n# D inherits from C\r\n\r\nclass D &lt; C                                   # methods are inherited from j \r\nend\r\nD.injectors.by_name.should == []\r\nD.injectors(:all).by_name == [:j]\r\n\r\n# New Objects\r\nC.new.foo.should == 'foo'                                           \r\nD.new.foo.should == 'foo'\r\n</code></pre>\r\n\r\n<p>More importantly though is the following:</p>\r\n\r\n<pre><code>facet :player do                       \r\n    def sound                               \r\n        'Lets make some music'                \r\n    end                                     \r\nend                                       \r\n\r\nTapePlayer = player do                        # version Tag\r\n    def play                                      # inherirts :sound\r\n        return 'Tape playing...' + sound()                          \r\n    end                                     \r\nend                                       \r\n\r\nCDPlayer = player do                          # another version Tag\r\n    def play                                      # also inherits sound\r\n        return 'CD playing...' + sound()\r\n    end\r\nend\r\n\r\nclass BoomBox\r\n    include TapePlayer\r\n\r\n    def on\r\n        play\r\n    end\r\nend\r\n\r\nclass JukeBox &lt; BoomBox                       # regular class inheritance\r\n    inject CDPlayer\r\nend\r\n\r\nBoomBox.new.on.should == 'Tape playing...Lets make some music'\r\nJukeBox.new.on.should == 'CD playing...Lets make some music'\r\n\r\njack :speakers\r\n\r\nBass = speakers do                            # adding composition   \r\n    def sound                               \r\n        super + '...boom boom boom...'        \r\n    end                                     \r\nend                                       \r\nJukeBox.inject Bass\r\n\r\nJukeBox.new.on.should == 'CD playing...Lets make some music...boom boom boom...'\r\n</code></pre>\r\n\r\n<p>From all this, the important thing to take is that injectors provide a sort of versioned inheritance.  The version inherits all of the pre-existing methods from the injector and freezes that function.  We can either Tag/Name it of simply include/extend into a target but the function is frozen at that time.  Tags cannot be modified or more clearly shouldn't be modified.  Classes retain the frozen version of the injector until the time an update is made.  Of course, there is always #define_method.   For more on all this see, the Rspec examples.</p>\r\n\r\n<hr>\r\n\r\n<p>But, this is the basic idea here.  An extended closure which can be used as a mix-in, prolonged to add function, and versioned and renamed to fit the purpose at hand. Using this approach Jackbox also goes on to solve the Decorator Pattern problem in the Ruby language.  </p>\r\n\r\n<hr>\r\n\r\n<h3><a id=\"user-content-the-gof-decorator-pattern\" class=\"anchor\" href=\"#the-gof-decorator-pattern\" aria-hidden=\"true\"><span class=\"octicon octicon-link\"></span></a>The GOF Decorator Pattern:</h3>\r\n\r\n<p>Traditionally this is only partially solved in Ruby through PORO decorators or the use of modules.  However, there are the problems of loss of class identity for the former and the limitations on the times it can be re-applied to the same object for the latter. With Jackbox this is solved.  An injector used as a decorator does not confuse class identity for the receiver. Decorators are useful in several areas of OOP: presentation layers, stream processing, command processors to name a few.  </p>\r\n\r\n<p>Here is the code for that:</p>\r\n\r\n<pre><code>class Coffee\r\n    def cost\r\n        1.50\r\n    end\r\nend\r\n\r\ninjector :milk do\r\n    def cost\r\n        super() + 0.30\r\n    end\r\nend\r\ninjector :vanilla do\r\n    def cost\r\n        super() + 0.15\r\n    end\r\nend\r\n\r\ncup = Coffee.new.enrich(milk).enrich(vanilla)\r\ncup.should be_instance_of(Coffee)\r\n\r\ncup.cost.should == 1.95\r\n</code></pre>\r\n\r\n<p>Furthermore, these same decorators can be then re-applied MULTIPLE TIMES to the same receiver.  This is something that is normally not possible with the regular Ruby base language.  Here are further examples:</p>\r\n\r\n<pre><code>cup = Coffee.new.enrich(milk).enrich(vanilla).enrich(vanilla)\r\n\r\n# or even...\r\n\r\ncup = Coffee.new.enrich milk, vanilla, vanilla\r\n\r\ncup.cost.should == 2.10\r\ncup.should be_instance_of(Coffee)\r\ncup.injectors.should == [:milk, :vanilla, :vanilla]\r\n</code></pre>\r\n\r\n<h3><a id=\"user-content-other-capabilities-of-injectors\" class=\"anchor\" href=\"#other-capabilities-of-injectors\" aria-hidden=\"true\"><span class=\"octicon octicon-link\"></span></a>Other Capabilities of Injectors</h3>\r\n\r\n<p>The functionality of Injectors can be removed from individual targets be them class targets or instance targets in various different ways.  This allows for whole 'classes' of functionality to be removed and made un-available and then available again at whim and under programer control.  </p>\r\n\r\n<p>Here is an Injector removed after an #enrich to individual instance:</p>\r\n\r\n<pre><code>class Coffee\r\n    def cost\r\n        1.00\r\n    end\r\nend\r\ninjector :milk do\r\n    def cost\r\n        super() + 0.50\r\n    end\r\nend\r\n\r\ncup = Coffee.new.enrich(milk)\r\nfriends_cup = Coffee.new.enrich(milk)\r\n\r\ncup.cost.should == 1.50\r\nfriends_cup.cost.should == 1.50\r\n\r\ncup.eject :milk\r\n\r\ncup.cost.should == 1.00\r\n\r\n# friends cup didn't change price\r\nfriends_cup.cost.should == 1.50\r\n</code></pre>\r\n\r\n<p>Here it is removed after an #inject at the class level:</p>\r\n\r\n<pre><code># create the injection\r\nclass Home\r\n    injector :layout do\r\n        def fractal\r\n        end\r\n    end\r\n    inject layout\r\nend\r\nexpect{Home.new.fractal}.to_not raise_error\r\n\r\n# build\r\nmy_home = Home.new\r\nfriends = Home.new\r\n\r\n# eject the code\r\nclass Home\r\n    eject :layout\r\nend\r\n\r\n# the result\r\nexpect{my_home.fractal}.to raise_error\r\nexpect{friends.fractal}.to raise_error\r\nexpect{Home.new.fractal}.to raise_error\r\n</code></pre>\r\n\r\n<p>The code for these examples makes use of the #eject method which is also opens the door to some additional functionality provided by injectors.  See the Strategy Pattern just below this.  </p>\r\n\r\n<h4><a id=\"user-content-eject-sym\" class=\"anchor\" href=\"#eject-sym\" aria-hidden=\"true\"><span class=\"octicon octicon-link\"></span></a>#eject *sym</h4>\r\n\r\n<p>This method ejects injector function from a single object or class.  It is in scope on any classes injected or enriched by an injector.  For other forms of injector withdrawal see the next sections as in addition to this method, there are other ways to control code presence in targets through the use of Injector Directives.  See below.  For more on this also see the rspec examples.</p>\r\n\r\n<h3><a id=\"user-content-injector-equality-and-difference\" class=\"anchor\" href=\"#injector-equality-and-difference\" aria-hidden=\"true\"><span class=\"octicon octicon-link\"></span></a>Injector Equality and Difference</h3>\r\n\r\n<p>Injectors can be compared.  This allows for further introspection capabilities which could be used to determine if a certain piece of code possesses a block of capabilities, test if those are equal to some other component's capabilities, or test what the difference is.  It only follows that if injectors can be applied and withdrawn from any target we should be able to test for their similarities to other injectors.  Here is how equality is defined:</p>\r\n\r\n<pre><code># Equality\r\n\r\nE().should == E()\r\nE().should_not == E().spec\r\n\r\nE(:tag).should == E()\r\nETag1 = E()\r\nETag1.should == E()\r\n\r\nextend E()\r\ninjectors.first.should == E()\r\n\r\nE() do\r\n    def foo                   # ** definition **\r\n    end\r\nend     \r\n\r\nE().should == E()\r\nETag1.should_not == E()\r\ninjectors.first.should_not == E()\r\nE(:tag).should == E()\r\n\r\nE().should_not == F()\r\n</code></pre>\r\n\r\n<p>Here is how difference is defined:</p>\r\n\r\n<pre><code># Difference\r\n\r\nE().diff.should_not be_empty\r\n# because\r\nE().should_not == E().spec      # like above        \r\n\r\n\r\n##################################\r\nE().diff.should_not be_loaded\r\n# because\r\nE().diff.join.should be_empty\r\nE().diff.delta.should_not be_empty\r\n\r\n\r\n##################################\r\nE().diff(E()).should be_empty   \r\n# because\r\nE().should == E()               # like above\r\n\r\nETag2 = E()\r\n\r\n\r\n##################################\r\nE().diff(ETag2).should be_empty\r\nETag2.diff(E()).should be_empty\r\n# because \r\nETag2.should == E()                         # like above\r\n</code></pre>\r\n\r\n<p>Again, for more on this see the rspec files.</p>\r\n\r\n<h3><a id=\"user-content-injector-directives\" class=\"anchor\" href=\"#injector-directives\" aria-hidden=\"true\"><span class=\"octicon octicon-link\"></span></a>Injector Directives</h3>\r\n\r\n<p>Once you have an injector handle you can also use it to issue directives to the injector.  These directives can have a profound effect on your code.</p>\r\n\r\n<h4><a id=\"user-content-collapse-directive\" class=\"anchor\" href=\"#collapse-directive\" aria-hidden=\"true\"><span class=\"octicon octicon-link\"></span></a>:collapse directive</h4>\r\n\r\n<p>This description produces similar results to the one for injector ejection (see above) except that further injector method calls DO NOT raise an error.  They just quietly return nil. Here are a couple of different cases:</p>\r\n\r\n<p>The case with multiple objects</p>\r\n\r\n<pre><code>injector :copiable do\r\n    def object_copy\r\n        'a dubious copy'\r\n    end\r\nend\r\n\r\no1 = Object.new.enrich(copiable)\r\no2 = Object.new.enrich(copiable)\r\n\r\no1.object_copy.should == 'a dubious copy'\r\no2.object_copy.should == 'a dubious copy'\r\n\r\ncopiable :silence\r\n\r\no1.object_copy.should == nil\r\no2.object_copy.should == nil\r\n</code></pre>\r\n\r\n<p>The case with a class receiver:</p>\r\n\r\n<pre><code>class SomeClass\r\n    injector :code do\r\n        def tester\r\n            'boo'\r\n        end\r\n    end\r\n\r\n    inject code\r\nend\r\n\r\na = SomeClass.new\r\nb = SomeClass.new\r\n\r\n# collapse\r\nSomeClass.code :collapse\r\n\r\na.tester.should == nil\r\nb.tester.should == nil\r\n\r\n# further\r\nSomeClass.eject :code \r\nexpect{ a.tester }.to raise_error\r\nexpect{ b.tester }.to raise_error\r\n</code></pre>\r\n\r\n<h4><a id=\"user-content-rebuild-directive\" class=\"anchor\" href=\"#rebuild-directive\" aria-hidden=\"true\"><span class=\"octicon octicon-link\"></span></a>:rebuild directive</h4>\r\n\r\n<p>Injectors that have been collapsed can at a later point then be reconstituted.  Here are a couple of cases:</p>\r\n\r\n<p>The case with multiple object receivers:</p>\r\n\r\n<pre><code>injector :reenforcer do\r\n    def thick_walls\r\n        '=====|||====='\r\n    end\r\nend\r\n\r\no1 = Object.new.enrich(reenforcer)\r\no2 = Object.new.enrich(reenforcer)\r\n\r\nreenforcer :collapse\r\n\r\no1.thick_walls.should == nil\r\no2.thick_walls.should == nil\r\n\r\nreenforcer :rebuild\r\n\r\no1.thick_walls.should == '=====|||====='\r\no2.thick_walls.should == '=====|||====='\r\n</code></pre>\r\n\r\n<p>The case with a class receiver:</p>\r\n\r\n<pre><code>class SomeBloatedObject\r\n    injector :ThinFunction do\r\n        def perform\r\n            'do the deed'\r\n        end\r\n    end\r\n    inject ThinFunction()\r\nend\r\nSomeBloatedObject.ThinFunction :silence  # alias to :collapse\r\n\r\ntester = SomeBloatedObject.new\r\ntester.perform.should == nil\r\n\r\nSomeBloatedObject.ThinFunction :active   # alias to :rebuild\r\ntester.perform.should == 'do the deed'\r\n</code></pre>\r\n\r\n<h4><a id=\"user-content-implode-directive\" class=\"anchor\" href=\"#implode-directive\" aria-hidden=\"true\"><span class=\"octicon octicon-link\"></span></a>:implode directive</h4>\r\n\r\n<p>This directive totally destroys the injector including the handle to it.  Use it carefully!</p>\r\n\r\n<pre><code>class Model\r\n    def feature\r\n        'a standard feature'\r\n    end\r\nend\r\n\r\ninjector :extras do\r\n    def feature\r\n        super() + ' plus some extras'\r\n    end\r\nend\r\n\r\ncar = Model.new.enrich(extras)\r\ncar.feature.should == 'a standard feature plus some extras'\r\n\r\nextras :implode\r\n\r\n# total implosion\r\ncar.feature.should == 'a standard feature'\r\n\r\nexpect{extras}.to raise_error(NameError, /extras/)\r\nexpect{ new_car = Model.new.enrich(extras) }.to raise_error(NameError, /extras/)\r\nexpect{\r\n    extras do\r\n        def foo\r\n        end\r\n    end\r\n    }.to raise_error(NameError, /extras/)\r\n</code></pre>\r\n\r\n<h3><a id=\"user-content-the-gof-strategy-pattern\" class=\"anchor\" href=\"#the-gof-strategy-pattern\" aria-hidden=\"true\"><span class=\"octicon octicon-link\"></span></a>The GOF Strategy Pattern:</h3>\r\n\r\n<p>Another pattern that Jackbox helps with is the GOF Strategy Pattern.  This is a pattern with changes the guts of an object as opposed to just changing its face. Traditional examples of this pattern use PORO component injection within constructors. </p>\r\n\r\n<p>Here are a couple alternate implementations:</p>\r\n\r\n<pre><code>class Coffee\r\n    attr_reader :strategy\r\n\r\n    def initialize\r\n      @strategy = nil\r\n    end\r\n    def cost\r\n        1.00\r\n    end\r\n  def brew\r\n        @strategy = 'normal'\r\n  end\r\nend\r\n\r\ncup = Coffee.new\r\ncup.brew\r\ncup.strategy.should == 'normal'\r\n\r\n\r\ninjector :sweedish do\r\n    def brew\r\n        @strategy = 'sweedish'\r\n    end\r\nend\r\n\r\ncup = Coffee.new.enrich(sweedish)           # clobbers original strategy for this instance only!!\r\ncup.brew\r\ncup.strategy.should == ('sweedish')\r\n</code></pre>\r\n\r\n<p>But, with #eject it is possible to have an even more general alternate implementation. This time we completely replace the current strategy by actually ejecting it out of the class and then injecting a new one:</p>\r\n\r\n<pre><code>class Tea &lt; Coffee  # Tea is a type of coffee!! ;~Q)\r\n    injector :SpecialStrategy do\r\n        def brew\r\n            @strategy = 'special'\r\n        end\r\n    end\r\n    inject SpecialStrategy()\r\nend\r\n\r\ncup = Tea.new\r\ncup.brew\r\ncup.strategy.should == 'special'\r\n\r\nTea.eject :SpecialStrategy\r\n\r\nTea.inject sweedish\r\n\r\ncup.brew\r\ncup.strategy.should == 'sweedish'\r\n</code></pre>\r\n\r\n<h3><a id=\"user-content-soft-tags\" class=\"anchor\" href=\"#soft-tags\" aria-hidden=\"true\"><span class=\"octicon octicon-link\"></span></a>Soft Tags</h3>\r\n\r\n<p>Just like hard tags above but a name is not needed:</p>\r\n\r\n<pre><code>jack :SomeJack do\r\n  def foo\r\n    :foo\r\n  end\r\nend\r\n\r\nSomeJack(:tag) do                             # New Version, not named\r\n  def foo\r\n    :foooooooo\r\n  end\r\nend\r\n</code></pre>\r\n\r\n<hr>\r\n\r\n<h3><a id=\"user-content-patterns-of-a-different-flavor\" class=\"anchor\" href=\"#patterns-of-a-different-flavor\" aria-hidden=\"true\"><span class=\"octicon octicon-link\"></span></a>Patterns of a Different Flavor</h3>\r\n\r\n<p>There are also some additional coding patterns possible with Jackbox Injectors.  Although not part of the traditional GOF set these new patterns are only possible now thanks to languages like Ruby that permit the morphing of traditional forms into newer constructs.  Here are some new patterns: </p>\r\n\r\n<p><strong>1) Late Decorator.-</strong> Another flow that also benefits from #define_method in an interesting way is the following:   </p>\r\n\r\n<pre><code>class Widget\r\n    def cost\r\n        1\r\n    end\r\nend\r\nw = Widget.new\r\n\r\ninjector :decorator\r\n\r\nw.enrich decorator, decorator, decorator, decorator\r\n\r\n# user input\r\nbid = 3.5 \r\n\r\ndecorator do\r\n    define_method :cost do                      # defines function on all injectors of the class\r\n        super() + bid\r\n    end\r\nend\r\n\r\nw.cost.should == 15\r\n</code></pre>\r\n\r\n<p>The actual injector function is late bound and defined only after some other data is available.</p>\r\n\r\n<p><strong>2) The Super Pattern.-</strong> No.  This is not a superlative kind of pattern.  Simply, the use of #super can be harnessed into a pattern of controlled recursion, like in the following example: </p>\r\n\r\n<pre><code>facet :Superb\r\n\r\nSuperb do\r\n    def process string, additives, index\r\n        str = string.gsub('o', additives.slice!(index))\r\n        super(string, additives, index) + str rescue str\r\n    end\r\n    extend Superb(), Superb(), Superb()\r\nend   \r\n\r\nSuperb().process( 'food ', 'aeiu', 0 ).should == 'fuud fiid feed faad '\r\nSuperb(:implode)                                 \r\n</code></pre>\r\n\r\n<p><strong>3) The Transformer Pattern.-</strong>  For a specific example of what can be accomplished using this workflow please refer to the rspec directory under the transformers spec.  Here is the basic flow:</p>\r\n\r\n<pre><code>jack :Solution\r\n\r\nSolution( :tag ) do\r\n    def solution\r\n        1\r\n    end\r\nend\r\nSolution( :tag ) do\r\n    def solution\r\n        2\r\n    end\r\nend\r\nSolution( :tag ) do\r\n    def solution\r\n        3\r\n    end\r\nend\r\n\r\n\r\nclass Client\r\n    inject Solution()\r\n\r\n    def self.solve\r\n        Solution().tags.each { |e|\r\n            update e \r\n            puts new.solution rescue nil\r\n        }                              \r\n\r\n        # or...\r\n\r\n        solutions = Solution().tags.each\r\n        begin\r\n            update solutions.next\r\n            puts solved = new().solution()\r\n        end until solved\r\n        solved\r\n    end\r\n\r\nend\r\n\r\nClient.solve\r\n</code></pre>\r\n\r\n<p><strong>4) The Re-Classing Pattern.-</strong>  Our base method #lets has one more interesting use which allows for an alternative way to refine classes.  We have termed this Re-Classing.  Look at the following code:</p>\r\n\r\n<pre><code># define injectors\r\n\r\nStringExtensions = injector :StringExtensions do\r\n  def to_s\r\n        super + '++++'\r\n    end\r\nend\r\n\r\n\r\n# Jackbox Reclassing\r\n\r\nlets String do \r\n    include StringExtensions\r\nend\r\n\r\nassert( String('boo').to_s == 'boo++++' )\r\n\r\ndescribe :String do\r\n    it 'should pass' do\r\n\r\n        String('boo').to_s.should == 'boo++++'\r\n\r\n    end \r\nend\r\n</code></pre>\r\n\r\n<p>The important thing to remember here is that #String() is a method now. We can redefine it, name-space it, test for its presence, etc.  We can also use it to redefine the re-class's methods.  For more on this see, the rspec files and the Jackbox blog at <a href=\"http://jackbox.us\"></a><a href=\"http://jackbox.us\">http://jackbox.us</a>.              </p>\r\n\r\n<hr>\r\n\r\n<p>For more information and additional examples see the rspec examples on this project.  There you'll find a long list of nearly <strong>200</strong> rspec examples and code showcasing some additional features of Jackbox Injectors along with some additional descriptions.</p>\r\n\r\n<hr>\r\n\r\n<h2><a id=\"user-content-additional-tools\" class=\"anchor\" href=\"#additional-tools\" aria-hidden=\"true\"><span class=\"octicon octicon-link\"></span></a>Additional Tools</h2>\r\n\r\n<p>Jackbox includes a couple of additional ancillary tools.  The first is an Abstract class base that prevents instantiation of the base class itself but not of its descendants.  The second is a persistent properties module named Prefs; it creates class/module/namespace level persistent properties.</p>\r\n\r\n<p>With Abstract the code goes like this:</p>\r\n\r\n<pre><code>class Vector\r\n    extend Abstract\r\n    def speed\r\n        0\r\n    end\r\n    def direction\r\n    end\r\nend\r\nexpect{Vector.new}.to raise_error\r\n\r\nclass Velocity &lt; Vector\r\n    def speed\r\n        super + 35\r\n    end\r\n    def direction\r\n        :north\r\n    end\r\nend\r\n\r\nexpect{Velocity.new}.to_not raise_error\r\nVelocity.new.speed.should == 35\r\n</code></pre>\r\n\r\n<p>With Prefs you can add persistent properties to a class.  These properties persist even through program termination. Here is the example code:</p>\r\n\r\n<pre><code>module Jester\r\n    extend Prefs\r\n\r\n    pref :value =&gt; 10\r\nend\r\n\r\nJester.value.should == 10\r\nJester.value = 3\r\nJester.value.should == 3\r\nJester.reset :value\r\nJester.value.should == 10 \r\n</code></pre>\r\n\r\n<p>There is also command line utility called <strong>jackup</strong> that simply allows users to bring their projects into a <em>\"Jackbox level\"</em>.  It inserts the right references and turns the targeted project into a bundler gem if it isn't already one also adding a couple of rake tasks.</p>\r\n\r\n<h2><a id=\"user-content-availability\" class=\"anchor\" href=\"#availability\" aria-hidden=\"true\"><span class=\"octicon octicon-link\"></span></a>Availability</h2>\r\n\r\n<p>Jackbox is current available for Linux, Mac, and Windows versions of Ruby 1.9.3 thru 2.2.1</p>\r\n\r\n<h2><a id=\"user-content-installation\" class=\"anchor\" href=\"#installation\" aria-hidden=\"true\"><span class=\"octicon octicon-link\"></span></a>Installation</h2>\r\n\r\n<p>Add this line to your application's Gemfile:</p>\r\n\r\n<pre><code>gem 'jackbox'\r\n</code></pre>\r\n\r\n<p>And then execute:</p>\r\n\r\n<pre><code>$ bundle\r\n</code></pre>\r\n\r\n<p>Or install it yourself as:</p>\r\n\r\n<pre><code>$ gem install jackbox\r\n</code></pre>\r\n\r\n<p>And then execute the following command inside the project directory:</p>\r\n\r\n<pre><code>$jackup \r\n</code></pre>\r\n\r\n<h2><a id=\"user-content-support\" class=\"anchor\" href=\"#support\" aria-hidden=\"true\"><span class=\"octicon octicon-link\"></span></a>Support</h2>\r\n\r\n<p>Any questions/suggestions can be directed to the following email address: </p>\r\n\r\n<p><strong><a href=\"mailto:service.delivered@ymail.com\">service.delivered@ymail.com</a></strong>.  </p>\r\n\r\n<p>Please include your platform along with a description of the problem and any available stack trace.  Please keep in mind that, at this time we have limited staff and we will do our best to have a quick response time. </p>\r\n\r\n<p>Also please follow us at <a href=\"http://jackbox.us\">http://jackbox.us</a></p>\r\n\r\n<h2><a id=\"user-content-licensing\" class=\"anchor\" href=\"#licensing\" aria-hidden=\"true\"><span class=\"octicon octicon-link\"></span></a>Licensing</h2>\r\n\r\n<p>Jackbox is currently free for anyone to <strong>use</strong>.\r\nCopyright Â© 2014, 2015 LHA. All rights reserved.</p>\r\n\r\n<p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\r\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\r\nNON-INFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\r\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\r\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>\r\n\r\n<p>In the above copyright notice, the letters LHA are the english acronym \r\nfor Luis Enrique Alvarez (Barea) who is the author and owner of the copyright.</p>\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}