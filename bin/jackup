#!/usr/bin/env ruby 
# encoding: utf-8
#
# author: LHA
# 
###### 
require 'thor'
require 'jackbox'
require_relative '../lib/jackbox/examples/dir'

include Injectors
#
# Tests to determine foder structuree
#
injector :structure_tests do
	def simple?
		!gem? && !Dir.ls('**/*.rb').empty?
	end

	def bundle?
		File.exists?('Gemfile') #&& File.exists?('Rakefile')
	end
end
Dir.singleton_class.inject structure_tests


#
# This class adds the jackbox support to a project
# 
class Jackup < Thor
	
	desc 'stage', 'Stage jackbox support to project files'
	long_desc <<-HELP
\x5--  
Stage jackbox support to project files:
\x5Use with argument: jackup stage [name] to create a new staged project. Use --no-[option] prefix to exclude features/files. 
\x5--  
	HELP
	method_option :bundle, :default => true, :desc => 'Use Bundler'
	method_option :gem, :default => true, :desc => 'Gem Project'
	# method_option :testing, :default => true, :desc => 'Testing Framework'
	method_option :git, :default => true, :desc => 'Use git source control'
	def stage target=Dir.pwd

		decorate :no_bundle do
			options[:bundle].in? [false, nil] 
		end

		decorate :no_gem do
			options[:gem].in? [false, nil]
		end
		
		# decorate :no_testing do
		# 	options[:testing].in? [false, nil]
		# end
		
		decorate :no_git do
			options[:git].in? [false, nil]
		end
		
		unless Dir.exists? target
			FileUtils.mkpath target
		end
		Dir.chdir target
		self.bundler_gem = File.basename(target)

		case
		when (no_gem and no_bundle)
			add_basics if Dir.empty?
		when no_gem
			case
			when Dir.empty?
				add_basics and add_bundle
			else
				add_basics
				add_bundle unless Dir.bundle?
			end
		
		when no_bundle
			case
			when Dir.empty?
				no_bundle_gem
			when Dir.simple?
				if Dir.bundle?
					bundle_gem
				else
					no_bundle_gem
				end
			end
		else
			case
			when Dir.empty?
				bundle_gem
			else
				no_bundle_gem unless Dir.gem? 
				add_bundle unless Dir.bundle?
			end
		end
		add_rakefile unless rakefile
		add_git unless Dir.exists?('.git') or no_git
		
		if Dir.bundle?
			add_line to: gemfile, format: bundler
		end
		add_line to: topfile if topfile
		add_line to: rakefile, format: rake
		add_line to: rakefile, format: bundle_rake if Dir.gem?
	end
	default_task :stage
	
	
	no_commands {
		
		# file specifiers
		def gemfile
			'Gemfile' if File.exists?('Gemfile')
		end
		def rakefile
			'Rakefile' if File.exists?('Rakefile')
		end
		def topfile
			(
	      [] << 
	      	File.join('lib', File.basename(Dir.pwd)+'.rb') << 
	      	Dir['**/*.rb'].group_by {|g| g.scan('/').size}.values.sort <<
	      	File.basename(Dir.pwd) <<
	      	File.join('bin', File.basename(Dir.pwd))
			)
			.flatten.select { |file| File.exists?(file) and file }.first
		end		
		
		# format specifiers
		def bundler
			["\ngem 'rspec'\ngem 'jackbox'\n\n", "\ngem \"rspec\"\ngem \"jackbox\"\n\n"]
		end
		def required
			["\nrequire 'jackbox'\n", "\nrequire \"jackbox\"\n"]
		end
		def rake
			["\nrequire 'jackbox/rake'\n", "\nrequire \"jackbox/rake\"\n"]
		end
		def bundle_rake
			["require 'bundler/gem_tasks'\n", "require \"bundler/gem_tasks\"\n"]
		end
		
		# helpers
		def rfolder
			"#{ENV['HOME']}/tmp/jackup/#{(0...10).map { ('a'..'z').to_a[rand(26)] }.join}"
		end

		def bundler_gem= basename
			tdir = rfolder()
			@bundler_gem = File.join(tdir, basename)
			Dir.new(tdir) do
				current = Dir.pwd
				Dir.chdir tdir
				system "bundle gem #{basename}", :out => "#{ENV['HOME']}/tmp/nul", :err => :out
				Dir.chdir current
			end
		end
		
		def bundler_gem
			@bundler_gem
		end

		# actions
		def bundle_gem
			# move gemfile to target unless target gemfile
			FileUtils.cp "#{bundler_gem}/Gemfile", '.' unless File.exists?("Gemfile")
			no_bundle_gem
		end
		
		def no_bundle_gem
			basename = File.basename(self.bundler_gem)
			# move gemspec to target unless target gemspec
			FileUtils.cp "#{bundler_gem}/#{basename}.gemspec", '.' unless File.exists?("#{basename}.gemspec")
			add_basics
		end

		def add_basics
			basename = File.basename(self.bundler_gem)
			# make lib unless lib
			Dir.new("lib") unless Dir.exists?("lib")
			# write lib/target.rb unless lib/target.rb
			FileUtils.cp "#{bundler_gem}/lib/#{basename}.rb", "lib/#{basename}.rb" unless File.exists?("lib/#{basename}.rb")
			# make lib/target unless lib/target
			Dir.new("lib/#{basename}") unless Dir.exists?("lib/#{basename}")
			# write lib/target/version.rb unless lib/target/version.rb
			FileUtils.cp "#{bundler_gem}/lib/#{basename}/version.rb", "lib/#{basename}/version.rb" unless File.exists?("lib/#{basename}/version.rb")
			# make bin and write bin/target if --bin unless bin or bin/target

			# make test dir and wrtie test_helper
			framework = `gem list`.match(/rspec/).nil? ? 'test' : 'spec'
			Dir.new(framework) and open "#{framework}/#{framework}_helper.rb", 'w+' do |file|
				file.puts "\n# Insert your #{framework} helpers here"
			end unless Dir.exists?('spec') or Dir.exists?('test') #or no_testing
			framework
		end

		def add_bundle	
			FileUtils.cp "#{bundler_gem}/Gemfile", '.'
		end
		
		def add_rakefile
			FileUtils.touch 'Rakefile'
		end
		
		def add_git
			# move git directory if git unless existing
			FileUtils.cp_r "#{bundler_gem}/.git/.", '.git' if `git`.match('usage: git') unless Dir.exists?('.git') #or no_git
		end
		
		def add_line(spec)
			open spec[:to], 'r+' do |file|
				lines = file.readlines
				file.rewind

				index = 0
				# look for the first 'require' line in file				
				lines.each_with_index { |line, i| 
					if line.match(/^require/).nil?
						break if index != i
						index = i + 1
						next
					else
						index = i
					end 
				}
				# insert our line after check to see not already there
				with lines do
					format = spec[:format] || required
					unless join.match(Regexp.new(format.join('|')))
						insert(
							index && index + 1 || 0, format.last
							) 
					end
				end

				file.write lines.join
			end
		end
		
	}				

end

Jackup.start(ARGV) #if $0 == __FILE__

